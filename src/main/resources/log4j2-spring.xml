<?xml version="1.0" encoding="UTF-8" ?>
<!-- status : 这个用于设置log4j2自身内部的信息输出,默认是OFF,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
     monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
               注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件， 文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 -->
<Configuration status="TRACE" monitorInterval="600">

    <Properties> <!-- 配置全局变量 -->
        <!-- 配置日志文件输出目录，此配置将日志输出到tomcat根目录下的指定文件夹 -->
        <!-- <Property name="LOG_HOME">D:/logs</Property> -->
        <Property name="LOG_HOME">./target/eureka/logs</Property>
        <!-- 配置日志输出格式 -->
        <Property name="LOG_PATTERN">%d{yyyy-MM-dd 'at' HH:mm:ss.SSS} %-5level [%t] (%F:%M:%L) --- %m%xEx%n</Property>
        <!-- 配置日志输出级别 --><!-- 设置显示级别直接在这里修改 -->
        <Property name="OUT_LOG_LEVEL">INFO</Property>
        <!-- 配置日志切割的最小单位 -->
        <Property name="FILE_SIZE">100MB</Property>
    </Properties>

    <Appenders>
        <!-- 优先级从高到低分别是 OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE -->
        <!-- 单词解释：
        Match：匹配
        DENY：拒绝
        Mismatch：不匹配
        ACCEPT：接受 -->
        <!--
        DENY，日志将立即被抛弃不再经过其他过滤器；
        NEUTRAL，有序列表里的下个过滤器过接着处理日志；
        ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->
        <!--输出日志的格式
         %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
         %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
         %p : 日志输出格式,输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
         %c : logger的名称 (%logger)
         %t : 输出当前线程名称
         %m : 日志内容，即 logger.info("message")
         %n : 换行符
         %C : Java类名(%F)
         %L : 日志输出所在行数
         %M : 日志输出所在方法名
         %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数
         hostName : 本地机器名
         hostAddress : 本地ip地址 -->

        <!--这个输出控制台的配置，这里输出除了debug到error级别的信息到System.out -->
        <Console name="console_out_appender" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) . -->
            <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL" />
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="NEUTRAL" />
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="NEUTRAL" />
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${LOG_PATTERN}" />
            <!-- <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/> -->
        </Console>
        <!-- 这个输出控制台的配置，这里输出error级别以上的信息到System.err，在eclipse控制台上看到的是红色文字 -->
        <Console name="console_err_appender" target="SYSTEM_ERR">
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>

        <!-- 运行时的测试日志 -->
        <!--   文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!--   append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
        <File name="INFO" fileName="${LOG_HOME}/testLog.log" append="false">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>

        <!--
                循环日志文件：日志文件大于阀值的时候，就开始写一个新的日志文件这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档

        fileName    : 指定当前日志文件的位置和文件名称
        filePattern : 指定当发生Rolling时，文件的转移和重命名规则
        SizeBasedTriggeringPolicy : 指定当文件体积大于size指定的值时，触发Rolling
        DefaultRolloverStrategy : 指定最多保存的文件个数
        TimeBasedTriggeringPolicy : 这个配置需要和filePattern结合使用
                注意:filePattern中配置的文件重命名规则是${FILE_NAME}_%d{yyyy-MM-dd}_%i，最小的时间粒度是dd，即天，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1天生成一个新文件
        -->

        <!-- TRACE级别日志 ; 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出trace级别的数据到trace.log -->
        <RollingFile name="trace_appender" immediateFlush="true" fileName="${LOG_HOME}/trace.log" filePattern="${LOG_HOME}/trace/trace - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 每个日志文件最大2MB -->
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}" />
            </Policies>
            <!-- 设置同一类型日志文件个数,默认为7 -->
            <!-- <DefaultRolloverStrategy max="20"/> -->
            <Filters>
                <!-- 此Filter意思是，只输出TRACE级别的数据 DENY，日志将立即被抛弃不再经过其他过滤器； NEUTRAL，有序列表里的下个过滤器过接着处理日志； ACCEPT，日志会被立即处理，不再经过剩余过滤器。 -->
                <ThresholdFilter level="debug" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- DEBUG级别日志 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出debug级别的数据到debug.log; -->
        <RollingFile name="debug_appender" immediateFlush="true" fileName="${LOG_HOME}/debug.log" filePattern="${LOG_HOME}/debug/debug - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 每个日志文件最大2MB ; -->
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}" /><!-- 按大小分 -->
                <!-- 如果启用此配置，则日志会按文件名生成新压缩文件， 即如果filePattern配置的日期格式为 %d{yyyy-MM-dd HH} ，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d{yyyy-MM-dd} ，则天生成一个压缩文件 -->
                <!-- <TimeBasedTriggeringPolicy interval="1" modulate="true" /> --><!-- 按天分日志文件 -->
            </Policies>
            <Filters><!-- 此Filter意思是，只输出debug级别的数据 -->
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- INFO级别日志 -->
        <RollingFile name="info_appender" immediateFlush="true" fileName="${LOG_HOME}/info.log" filePattern="${LOG_HOME}/info/info - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}" />
            </Policies>
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- WARN级别日志 -->
        <RollingFile name="warn_appender" immediateFlush="true" fileName="${LOG_HOME}/warn.log" filePattern="${LOG_HOME}/warn/warn - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}" />
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
        </RollingFile>

        <!-- ERROR级别日志 -->
        <RollingFile name="error_appender" immediateFlush="true" fileName="${LOG_HOME}/error.log" filePattern="${LOG_HOME}/error/error - %d{yyyy-MM-dd HH_mm_ss}.log.gz">
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}" />
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
        </RollingFile>

    </Appenders>

    <!--  然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <!--同步日志配置 -str -->

    <!--<Loggers>-->
        <!--&lt;!&ndash;过滤掉spring和mybatis的一些无用的DEBUG信息&ndash;&gt;-->
        <!--<logger name="org.springframework" level="INFO" />-->
        <!--<logger name="org.mybatis" level="INFO" />-->
        <!--&lt;!&ndash; 配置日志的根节点 &ndash;&gt;-->
        <!--&lt;!&ndash; 定义logger，只有定义了logger并引入了appender，appender才会生效，这里需要注意的是，如果使用<asyncRoot> 或 <asyncLogger>，includeLocation="true"是必须要设置才会有类路径等一些信息打印出来。 &ndash;&gt;-->
        <!--<root level="${OUT_LOG_LEVEL}" includeLocation="true">-->
            <!--&lt;!&ndash;<appender-ref ref="console_out_appender" />&ndash;&gt;-->
            <!--&lt;!&ndash;<appender-ref ref="console_err_appender" />&ndash;&gt;-->
            <!--<appender-ref ref="trace_appender" />-->
            <!--<appender-ref ref="debug_appender" />-->
            <!--<appender-ref ref="info_appender" />-->
            <!--<appender-ref ref="warn_appender" />-->
            <!--<appender-ref ref="error_appender" />-->
        <!--</root>-->
    <!--</Loggers>-->
    <!--同步日志配置 -end -->

<!--异步日志配置 -str-->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO" />
        <logger name="org.mybatis" level="INFO" />
        <!-- 定义logger，只有定义了logger并引入了appender，appender才会生效 -->
        <!-- 打印日志同步输出 -->
        <root level="${OUT_LOG_LEVEL}" includeLocation="true">
            <appender-ref ref="console_out_appender" />
            <appender-ref ref="console_err_appender" />
        </root>

        <!--异步日志的话请打开下面asyncRoot，并且关闭root-->
        <!--<asyncRoot level="${OUT_LOG_LEVEL}" includeLocation="true">-->
            <!--<appender-ref ref="trace_appender" />-->
            <!--<appender-ref ref="debug_appender" />-->
            <!--<appender-ref ref="info_appender" />-->
            <!--<appender-ref ref="warn_appender" />-->
            <!--<appender-ref ref="error_appender" />-->
        <!--</asyncRoot>-->

        <!-- 保存日志异步输出,AsyncLogger暂时无效，不知道原因，无需打开， -->
        <!--<asyncLogger name="SYNCLOG" level="${OUT_LOG_LEVEL}" includeLocation="true">-->
        <!--<appender-ref ref="trace_appender" />-->
        <!--<appender-ref ref="debug_appender" />-->
        <!--<appender-ref ref="info_appender" />-->
        <!--<appender-ref ref="warn_appender" />-->
        <!--<appender-ref ref="error_appender" />-->
        <!--</asyncLogger>-->
    </Loggers>
    <!--异步日志配置 -en -->
</Configuration>